@{
    ViewBag.Title = "jQuery Implementation of Conway's Game of Life Example";
}

@Html.BodyTagUpdate("game")

@section AddToHead{
<link href="@Url.Content("~/Content/jsgame.css")" rel="stylesheet" type="text/css"/>
}

<script type="text/javascript">

    var holder = '#gamecontainer';
    var rows = 36;
    var cols = 18;
    var interval;
    var speed = 100;
    var isGameRunning = false;
    var lastCelsAlive = []; //an array that store the last cells alive and compares it with the next set to see of and end has reached

    var presets = {
        blinker: ['#r9c18', '#r9c19', '#r9c20'],
        glider: ['#r8c19', '#r9c18', '#r10c18', '#r10c19', '#r10c20'],
        toad: ['#r9c19', '#r9c20', '#r9c21', '#r10c18', '#r10c19', '#r10c20'],
        spaceship: ['#r8c19', '#r8c20', '#r9c17', '#r9c18', '#r9c20', '#r9c21', '#r10c17', '#r10c18', '#r10c19', '#r10c20', '#r11c18', '#r11c19'],
        pulsar: ['#r3c15', '#r3c16', '#r3c17', '#r3c21', '#r3c22', '#r3c23',
            '#r5c13', '#r5c18', '#r5c20', '#r5c25',
            '#r6c13', '#r6c18', '#r6c20', '#r6c25',
            '#r7c13', '#r7c18', '#r7c20', '#r7c25',
            '#r8c15', '#r8c16', '#r8c17', '#r8c21', '#r8c22', '#r8c23',
            '#r10c15', '#r10c16', '#r10c17', '#r10c21', '#r10c22', '#r10c23',
            '#r11c13', '#r11c18', '#r11c20', '#r11c25',
            '#r12c13', '#r12c18', '#r12c20', '#r12c25',
            '#r13c13', '#r13c18', '#r13c20', '#r13c25',
            '#r15c15', '#r15c16', '#r15c17', '#r15c21', '#r15c22', '#r15c23', ]
    };

    $(document).ready(function () {
        createGrid(cols, rows);
        initGameOfLife();

        $('.preset').click(function () {
            applyPreset($(this).html().toLowerCase());
        });
    });

    function initGameOfLife() {
        $(holder + ' td').click(function () {
            if (parseInt($(this).attr('status'))) {
                $(this).removeClass('cel');
                $(this).attr('status', 0);
            }
            else {
                $(this).addClass('cel');
                $(this).attr('status', 1);
            }
        });
        $('#start').click(startGameOfLife);
        $('#stop').click(stopGameOfLife);
        $('#reset').click(resetGameOfLife);
    }

    function startGameOfLife() {
        //check if some cels are selected
        if ($('.cel').length && !isGameRunning) {
            console.log('starting game of life!');
            isGameRunning = true;
            interval = setInterval(game, speed);
        }

        if ($('.cel').length == 0) alert('Select some cels by clicking on them and then click Start!');
    }

    function getAliveNeighboursCount(cel) {
        var nArr = getNeighboringCels('#' + cel.attr('id'));
        var nArrAliveNum = 0;
        for (var i = 0; i < nArr.length; i++) {
            if (parseInt($(nArr[i]).attr('status'))) {
                nArrAliveNum++;
            }
        }
        return nArrAliveNum;
    }

    function game() {
        console.log('...');
        //collect cells which will live and the ones which will die
        cLiveArr = [];
        cDieArr = [];

        //run a loop on all the cels and see check their status
        $(holder + ' td').each(function () {

            var nArrAliveNum = getAliveNeighboursCount($(this));
            if (parseInt($(this).attr('status'))) {
                //this cell dies
                if (!(nArrAliveNum == 2 || nArrAliveNum == 3)) {
                    cDieArr.push($(this));
                }
            }
            else {
                //this cell is resurrected
                if (nArrAliveNum == 3) {
                    cLiveArr.push($(this));
                }
            }
        });

        //bring to life or kill cells from collection
        for (var i = 0; i < cLiveArr.length; i++) {
            selectCel(cLiveArr[i]);
        }

        for (var i = 0; i < cDieArr.length; i++) {
            unselectCel(cDieArr[i]);
        }

        //check if all cels are dead.. if so then stop the game
        if ($('.cel').length < 1) {
            alert('All cells dead! GAME OVER!');
            resetGameOfLife();
        }
    }

    function stopGameOfLife() {
        console.log('stopping game of life');
        isGameRunning = false;
        clearInterval(interval);
    }

    function resetGameOfLife() {
        stopGameOfLife();
        console.log('reseting game of life');
        $('.cel').each(function () {
            unselectCel($(this));
        });
    }

    //gol helpers

    var rowsArr = [];
    var totalRows;
    var totalCols;

    function createGrid(rows, cols) {
        //create a table with specified number of columns and rows inside the holder
        totalRows = rows;
        totalCols = cols;

        var htmlStr = '';
        htmlStr += '<table>';
        for (var i = 0; i < rows; i++) {
            htmlStr += '<tr>';
            var arr = [];
            for (var j = 0; j < cols; j++) {
                htmlStr += '<td id="r' + i + 'c' + j + '" r="' + i + '" c="' + j + '" status="0">';
                htmlStr += '</td>';
                arr.push('#' + 'r' + i + 'c' + j);
            }
            rowsArr.push(arr);
            htmlStr += '</tr>';
        }
        htmlStr += '</table>';

        $(holder).append(htmlStr);
    }

    function getNeighboringCels(cel) {

        var arr = [];
        var rowId = parseInt($(cel).attr('r'));
        var colId = parseInt($(cel).attr('c'));

        var nextRow = rowId + 1;
        var nextCol = colId + 1;
        var prevRow = rowId - 1;
        var prevCol = colId - 1;

        if(rowId == totalRows - 1)
            nextRow = 0;
        if(rowId == 0)
            prevRow = totalRows - 1;
        if(colId == totalCols - 1)
            nextCol = 0;
        if(colId == 0)
            prevCol = totalCols - 1;

        arr.push(rowsArr[prevRow][colId]);
        arr.push(rowsArr[nextRow][colId]);
        arr.push(rowsArr[rowId][prevCol]);
        arr.push(rowsArr[rowId][nextCol]);
        arr.push(rowsArr[prevRow][prevCol]);
        arr.push(rowsArr[prevRow][nextCol]);
        arr.push(rowsArr[nextRow][prevCol]);
        arr.push(rowsArr[nextRow][nextCol]);

        return arr.unique();
    }

    function selectCel(cel) {
        cel.attr('status', 1);
        cel.addClass('cel');
    }

    function unselectCel(cel) {
        cel.attr('status', 0);
        cel.removeClass('cel');
    }

    function applyPreset(p) {
        resetGameOfLife();
        for (var i = 0; i < presets[p].length; i++) {
            selectCel($(presets[p][i]));
        }
    }

    Array.prototype.unique = function () {
        var r = [];
        for (var i = 0; i < this.length; i++) {
            if (r.indexOf(this[i]) == -1)
                r.push(this[i]);
        }
        return r;
    }
</script>

<div id="page" style="min-width:500px">
    @Html.Partial("_JQGameNav")
    <div id='wrapper'>
        <div id='buttons' style='border:1px solid;'>
        <table style='width: 82%'>
            <tr>
	            <td>
		        <strong>Actions:</strong> 
		        <button id='start'>Start</button>
		        <button id='stop'>Stop</button>
		        <button id='reset'>Reset</button>
	            </td>
	            <td style='text-align: right;'>
		        <strong>Presets:</strong> 
		        <button class='preset'>Blinker</button>
		        <button class='preset'>Glider</button>
		        <button class='preset'>Toad</button>
		        <button class='preset'>Spaceship</button>
                <button class='preset'>Pulsar</button>
	            </td>
	        </tr>
        </table>
        </div>
        <div id='gamecontainer'></div>
    </div>
</div>
